alias bt="wget http://cachefly.cachefly.net/100mb.test -O /dev/null"
alias lock="/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine"
alias lash="ls -lash"
alias mewy="ssh tunnel"
alias cse="ssh cse"
alias debserver="ssh debianlocal"
alias flushdns="sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder; say DNS cache flushed"
alias reload="source ~/.zshrc"
alias ip2="ipython2"
# alias ip="ipython"
alias ip3="ipython3"
alias ctfpy="ipython2 --profile=ctf"
recomp() {
    if [ -f '~/.zcompdump' ]; then
        rm -rf ~/.zcompdump*
    fi
    zsh
}
alias pg='ping 8.8.8.8'
alias burp="java -jar /Users/sean/tools/burp/burp-latest &; /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --profile-directory=\"Profile 4\" --disable-xss-auditor &"
alias burpo="java -jar /Users/sean/tools/burp/burp-latest &"
alias ctftime="docker run -v /Users/sean/ctftime:/root/host-share --privileged -it --workdir=/root ctfhacker/epictreasure"
alias rot13="tr '[A-Za-z]' '[N-ZA-Mn-za-m]’"
alias ls='ls --color=auto'
alias awk=gawk
alias wtf="echo -n 'ಠ_ಠ' | pbcopy"
alias dc=docker-compose
alias gam="/Users/sean/bin/gam/gam"
alias tmux="tmux -2u"
alias payloads="cd ~/tmp/payloads"
alias pload=payloads
alias checkssl="gnutls-cli --print-cert"
alias aosmark="cd /Users/sean/google-drive/Uni/Courses/COMP/9242-aos/project/comp9242-aos; open /Users/sean/google-drive/Uni/Courses/COMP/9242-aos/Milestone\ marking\ -\ CSE\ Operating\ Systems\ -\ UNSW\ Confluence.pdf "
alias white="bash /Users/sean/offline/base16-shell/scripts/base16-tomorrow.sh"
alias drma="docker rm \$(docker ps -a -f status=exited -q)"
alias drmi="docker rmi \$(docker images -q)"
alias uncolor='echo -ne "\033[0m"'
alias pipenvreq="pipenv install \$(< requirements.txt)"
alias mss="sudo masscan --ports 0-65535 --open --banners --rate 1000000"
alias pcp="pwd | pbcopy"
alias cdp="cd \"\$(pbpaste)\""
alias k=kubectl


ff() {
    vim $(fzf)
}

gcd() {
    cd $GOPATH/src/github.com/$1
}

iosts() {
    ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no $1@io.netgarage.org
}

gce() {
    gcloud compute instances create --machine-type=f1-micro $1
    gcloud compute --project "cysca-162603" ssh --zone "us-west1-a" $1
}

gcedel() {
    gcloud compute instances delete $1
}

ec2config="/Users/sean/.ec2config.json"

ec2ls() {
    region="$1"
    if [ -z "$1" ]; then
        region="ap-southeast-2"
    fi
    echo region: $region
    aws ec2 describe-instances \
        --region "${region}" \
        --output text \
        --query 'Reservations[*].Instances[*].{ID:InstanceId,IP:PublicIpAddress,State:State.Name,Type:InstanceType}' | \
    grep -v 'terminated'
}

ec2rm() {
    region="$2"
    if [ -z "$2" ]; then
        region="ap-southeast-2"
    fi
    echo region: $region
    aws ec2 terminate-instances --instance-ids $1 --region "${region}"
}

ec2rm1() {
    region="$2"
    if [ -z "$2" ]; then
        region="ap-southeast-2"
    fi
    ec2rm $(ec2ls "$region" | cut -f1)
}

ec2ssh() {
    region="$2"
    if [ -z "$2" ]; then
        region="ap-southeast-2"
    fi

    user="$3"
    if [ -z "$3" ]; then
        user="ubuntu"
    fi

    echo region: $region
    private_key=$(jq -r ".\"$region\".\"private-key\"" "${ec2config}")
    echo pk: $private_key
    sshi "$user"@$1 "${private_key}" 
}

ec2go() {
    region="$1"
    if [ -z "$1" ]; then
        region="ap-southeast-2"
    fi
    echo region: $region

    image_id=$(jq -r ".\"$region\".\"image-id\"" "${ec2config}")
    security_group_ids=$(jq -r ".\"$region\".\"security-group-ids\"" "${ec2config}")
    key_name=$(jq -r ".\"$region\".\"key-name\"" "${ec2config}")
    private_key=$(jq -r ".\"$region\".\"private-key\"" "${ec2config}")

    echo $image_id $security_group_ids $key_name $private_key

    instance_id=$(aws ec2 run-instances \
        --image-id "${image_id}" \
        --instance-type t2.micro \
        --security-group-ids "${security_group_ids}" \
        --region "$region" \
        --count 1 \
        --key-name "${key_name}" \
        --output text \
        --query 'Instances[*].{ID:InstanceId}')

    echo "instance_id: $instance_id"
    while state=$(aws ec2 describe-instances --region "${region}" --instance-ids $instance_id --output text --query 'Reservations[*].Instances[*].State.Name'); test "$state" = "pending"; do
        sleep 1; echo -n '.'
    done;
    echo ''
    instance_ip=$(aws ec2 describe-instances --region "${region}" --instance-ids $instance_id --output text --query 'Reservations[*].Instances[*].PublicIpAddress')
    echo "instance_ip: $instance_ip"
    ssh ubuntu@$instance_ip -o "StrictHostKeyChecking false" -o "UserKnownHostsFile /dev/null" -o IdentitiesOnly=yes -i "${private_key}"
    while [ $? -ne 0 ]; do
        sleep 1
        echo "."
        ssh ubuntu@$instance_ip -o "StrictHostKeyChecking false" -o "UserKnownHostsFile /dev/null" -o IdentitiesOnly=yes -i "${private_key}"

    done

}

sshi() {
    ssh $1 -o IdentitiesOnly=yes -o "StrictHostKeyChecking false" -o "UserKnownHostsFile /dev/null" -i $2
}

gerl() {
    export PATH="/Users/sean/Library/Application Support/ErlangInstaller/19.3/bin:$PATH";
    clear
    erl
}

borg_backup() {
    borg create sean@southpole:/glacier/backups/sean::$1 ~ \
        --progress \
        --exclude '/Users/sean/.Trash/' \
        --exclude '*.pyc' \
        --exclude '._*' \
        --exclude '/Users/sean/.z.*';
    borg check sean@southpole:/glacier/backups/sean
}

rmdupe() {
    cat $1 | perl -lne 's/\s*$//; print if ! $x{$_}++'
}

mmv() {
    for file in `ls`; do
        mv $file "$1-$file";
    done;
}

rng() {
    od -tu2 -vAn -N$1 < /dev/urandom | tr '\n' ' ' | sed 's/ //g'
}

