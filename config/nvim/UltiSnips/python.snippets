snippet pwn "pwntools template"
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from pwn import *

context.log_level = 'info'
context.update(arch='amd64')
exe = './${1:${VISUAL:pwn}}'
libc = './${2:${VISUAL:libc.so.6}}'


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote('${3:${VISUAL:}}', ${4:${VISUAL:9447}})
    else:
        return process([exe] + argv, env={'LD_PRELOAD': libc}, *a, **kw)

# gdb
gdbscript = '''
continue
'''.format(**locals())

io = start()
elf = ELF(exe)
libc = ELF(libc)

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
${0:${VISUAL: # hax}}

endsnippet

snippet b64 "base64 imports"
import base64
b64d = base64.b64decode
b64e = base64.b64encode
${0}
endsnippet

snippet csv "csv reader"
import csv
with open(${1}, newline='') as csvfile:
	reader = csv.reader(csvfile)
	for row in reader:
		${0}
endsnippet

snippet csvdict "csv dictreader"
import csv
with open(${1}, newline='') as csvfile:
	reader = csv.DictReader(csvfile)
	data = list(reader)
	for row in data:
		${0}
endsnippet

snippet fread "file reader"
with open(${1:${VISUAL:infile}}, 'r') as f:
	data = f.read()
${0}
endsnippet

snippet infile "in file requirement"
import sys
if len(sys.argv) != 2:
	print("Usage: python %s infile" % (__file__))
	exit(-1)
infile = sys.argv[1]
endsnippet

snippet inoutfile "inout file"
import sys
if len(sys.argv) != 3:
	print("Usage: python %s infile outfile" % (__file__))
	exit(-1)
infile = sys.argv[1]
outfile = sys.argv[2]
endsnippet

snippet pnlist "print a list"
print("\n".join(${1:${VISUAL}}))
${0}
endsnippet

snippet pdict "print a dict"
print("\n".join("%s: %s" % (k, v) for k, v in ${1:{$VISUAL}}.items()))
${0}
endsnippet

snippet p2ue "urlenode"
import urllib
ue = lambda x: urllib.quote_plus(x).encode('utf-8')
endsnippet

snippet p3ue "urlencode"
import urllib.parse
ue = lambda x: urllib.parse.quote_plus(x).encode('utf-8')
endsnippet

snippet chunk "chunking"
def chunk(iterable, n):
	return [iterable[i:i+n] for i in range(0, len(iterable), n)]
chunk(${1:${VISUAL}}, ${2})
${0}
endsnippet

priority 5
snippet glog
def init_logging():
	global log

	log = logging.getLogger(__name__)
	sh = logging.StreamHandler()
	formatter = logging.Formatter(
		#'%(asctime)s - %(name)s - %(levelname)s - %(message)s')
		'%(asctime)s - %(message)s')
	sh.setFormatter(formatter)
	log.addHandler(sh)
	log.setLevel(logging.DEBUG)
endsnippet

snippet le
log.error(${0:msg})
# conflict with lambda=ld, therefor we change into Logger.debuG
endsnippet

snippet lg
log.debug(${0:msg})
endsnippet

snippet lw
log.warning(${0:msg})
endsnippet

snippet lc
log.critical(${0:msg})
endsnippet

snippet li
log.info(${0:msg})
endsnippet

snippet lazy "when you want to import ppp but you dont have it"
import base64
import binascii
import urllib
import zlib
from flask import json
from itsdangerous import base64_decode, base64_encode
from inspect import getsource
from IPython import get_ipython
b64d = base64.b64decode
b64e = base64.b64encode
ud = lambda x: urllib.unquote(x).encode('utf-8')
ue = lambda x: urllib.quote_plus(x).encode('utf-8')
uee = lambda x: ''.join(['%{0:02x}'.format(ord(c)) for c in x])
hx = lambda x: binascii.hexlify(x)
unhx = lambda x: binascii.unhexlify(x)
true = True
false = False
def chunk(iterable, n):
	return [iterable[i:i+n] for i in range(0, len(iterable), n)]
endsnippet

snippet py
#!/usr/bin/env python
# -*- coding: utf-8 -*-

def main():
    ${0}

if __name__ == "__main__":
    main()
endsnippet

